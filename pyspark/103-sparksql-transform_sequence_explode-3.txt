    
# Use sequence(start_T, end_T,[,step_T]): array<T>
available Spark 2.4.0

Note: For temporal(of or relating to time) sequence, the default step_T is 1 day or -1 day:

example: SELECT sequence(to_date('2018-01-01'), to_date('2018-03-01'), interval 1 month);
https://docs.databricks.com/_static/notebooks/apache-spark-2.4-functions.html

    
    df1 = spark.createDataFrame([
            (1, '2019-01-01', '2019-01-07')
          , (2, '2019-02-02', '2019-02-05')
          , (3, '2019-03-03', '2019-03-15')
        ], ['id', 'start_date', 'end_date']
    )
       # , schema='struct<id:int,start_date:date,end_date:date>'
    
    df_new = df1.withColumn('drange', F.explode(F.expr("sequence(to_date(start_date), to_date(end_date), interval 1 day)")))
    
    df_new.show(50)
    +---+----------+----------+----------+
    | id|start_date|  end_date|    drange|
    +---+----------+----------+----------+
    |  1|2019-01-01|2019-01-07|2019-01-01|
    |  1|2019-01-01|2019-01-07|2019-01-02|
    |  1|2019-01-01|2019-01-07|2019-01-03|
    |  1|2019-01-01|2019-01-07|2019-01-04|
    |  1|2019-01-01|2019-01-07|2019-01-05|
    |  1|2019-01-01|2019-01-07|2019-01-06|
    |  1|2019-01-01|2019-01-07|2019-01-07|
    |  2|2019-02-02|2019-02-05|2019-02-02|
    |  2|2019-02-02|2019-02-05|2019-02-03|
    |  2|2019-02-02|2019-02-05|2019-02-04|
    |  2|2019-02-02|2019-02-05|2019-02-05|
    |  3|2019-03-03|2019-03-15|2019-03-03|
    |  3|2019-03-03|2019-03-15|2019-03-04|
    |  3|2019-03-03|2019-03-15|2019-03-05|
    |  3|2019-03-03|2019-03-15|2019-03-06|
    |  3|2019-03-03|2019-03-15|2019-03-07|
    |  3|2019-03-03|2019-03-15|2019-03-08|
    |  3|2019-03-03|2019-03-15|2019-03-09|
    |  3|2019-03-03|2019-03-15|2019-03-10|
    |  3|2019-03-03|2019-03-15|2019-03-11|
    +---+----------+----------+----------+
    
**WARNING**: 
+ be cautuin using `Interval 1 month` with the sequence() function, it will not generate dates
for each month, instead, it's more like `interval 30 day`. To create a list of consecutive months
the approach might be the following:
  (1) d = explode(sequence(start_date, end_date, interval 28 day))
  (2) d = last_day(d)
  (3) run drop_duplicates() on the dataframe
