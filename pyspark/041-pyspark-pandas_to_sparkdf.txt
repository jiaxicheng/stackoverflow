
https://stackoverflow.com/questions/57070594/make-and-populate-a-pyspark-dataframe-with-columns-as-period-range


Set up the data from the original post.

    import pandas as pd
    from pyspark.sql import functions as F

    #... skip the code to initialize spark and df

    # if d1 and d2 are read as String, convert them to timestamp using the following
    df = df.withColumn('d1', F.to_date('d1')) \
           .withColumn('d2', F.to_date('d2'))

    >>> df.show()
    +---+---+----------+----------+
    |id_|  p|        d1|        d2|
    +---+---+----------+----------+
    |  1|  A|2018-09-26|2018-10-26|
    |  2|  B|2018-06-21|2018-07-19|
    |  2|  B|2018-08-13|2018-10-07|
    |  2|  B|2018-12-31|2019-02-27|
    |  2|  B|2019-05-28|2019-06-25|
    |  3|  C|2018-06-15|2018-07-13|
    |  3|  C|2018-08-15|2018-10-09|
    |  3|  C|2018-12-03|2019-03-12|
    |  3|  C|2019-05-10|2019-06-07|
    |  4|  A|2019-01-30|2019-03-01|
    |  4|  A|2019-05-30|2019-07-25|
    |  5|  C|2018-09-19|2018-10-17|
    +---+---+----------+----------+

    >>> df.printSchema()
    root
     |-- id_: string (nullable = true)
     |-- p: string (nullable = true)
     |-- d1: date (nullable = true)
     |-- d2: date (nullable = true)


Get min(d1) for `start_date` and max(d2) for `end_date`: 

    d = df.select(F.min('d1').alias('start_date'), F.max('d2').alias('end_date')).first()

    >>> d
    Row(start_date=datetime.date(2018, 6, 15), end_date=datetime.date(2019, 7, 25))

Get a list of dates and convert them to timestamp()

    cols = [ c.to_timestamp().date() for c in pd.period_range(d.start_date, d.end_date, freq='D') ]

    >>> cols
    [datetime.date(2018, 6, 15),
     datetime.date(2018, 6, 16),
    ...
     datetime.date(2019, 7, 23),
     datetime.date(2019, 7, 24),
     datetime.date(2019, 7, 25)]

Use list comprehension to iterate all dates in `cols`, and convert date to string as the resulting column name

    result = df.select('id_', *[ F.when((df.d1 <= c)&(df.d2 >= c),1).otherwise(0).alias(str(c)) for c in cols ])

    # check data in some columns
    result.select('id_', str(d.start_date), '2019-01-01', str(d.end_date)).show()
    +---+----------+----------+----------+
    |id_|2018-06-15|2019-01-01|2019-07-25|
    +---+----------+----------+----------+
    |  1|         0|         0|         0|
    |  2|         0|         0|         0|
    |  2|         0|         0|         0|
    |  2|         0|         1|         0|
    |  2|         0|         0|         0|
    |  3|         1|         0|         0|
    |  3|         0|         0|         0|
    |  3|         0|         1|         0|
    |  3|         0|         0|         0|
    |  4|         0|         0|         0|
    |  4|         0|         0|         1|
    |  5|         0|         0|         0|
    +---+----------+----------+----------+

