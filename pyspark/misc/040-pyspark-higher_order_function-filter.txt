
https://stackoverflow.com/questions/57050728/count-occurrences-of-a-list-of-substrings-in-a-pyspark-df-column/57058361#57058361

local file: file:///home/hdfs/test/pyspark/higher_order_funcs-1.txt

from pyspark.sql import functions as F

>>> df.show(5,0)
+---+--------------------------+
|ID |History                   |
+---+--------------------------+
|1  |USA|UK|IND|DEN|MAL|SWE|AUS|
|2  |USA|UK|PAK|NOR            |
|3  |NOR|NZE                   |
|4  |IND|PAK|NOR               |
+---+--------------------------+

# set up the list 
lst = ["USA", "IND", "DEN"]

# convert the list into format for SQL IN statement
# escaping might be required for security reasons
params = ','.join('"{}"'.format(e) for e in lst)

# the SQL statement
stmt = 'size(filter(data, x -> x IN ({0})))'


df_new = df.withColumn('data', F.split('History', '\|')) \
           .withColumn('cnt', F.expr(stmt.format(params)))

>>> df_new.show(5,0)
+---+--------------------------+----------------------------------+---+
|ID |History                   |data                              |cnt|
+---+--------------------------+----------------------------------+---+
|1  |USA|UK|IND|DEN|MAL|SWE|AUS|[USA, UK, IND, DEN, MAL, SWE, AUS]|3  |
|2  |USA|UK|PAK|NOR            |[USA, UK, PAK, NOR]               |1  |
|3  |NOR|NZE                   |[NOR, NZE]                        |0  |
|4  |IND|PAK|NOR               |[IND, PAK, NOR]                   |1  |
+---+--------------------------+----------------------------------+---+

Where we first split the field History into an array column called `data` and then use the filter function:

    filter(data, x -> x IN ("USA", "IND", "DEN"))

to retrieve only array elements which satisfy the condition: IN ("USA", "IND", "DEN"), after that, we count 
the resulting array with size() function.

*** Method-2 ***
Using array_contains() which is available since Spark version 1.5:

lst = ["USA", "IND", "DEN"]

df_new = df.withColumn('data', F.split('History', '\|')) \
           .withColumn('Count', sum([F.when(F.array_contains('data',e),1).otherwise(0) for e in lst]))

>>> df_new.show()
+---+--------------------+--------------------+-----+
| ID|             History|                data|Count|
+---+--------------------+--------------------+-----+
|  1|USA|UK|IND|DEN|MA...|[USA, UK, IND, DE...|    3|
|  2|      USA|UK|PAK|NOR| [USA, UK, PAK, NOR]|    1|
|  3|             NOR|NZE|          [NOR, NZE]|    0|
|  4|         IND|PAK|NOR|     [IND, PAK, NOR]|    1|
+---+--------------------+--------------------+-----+

Note: 
 * array_contain function only counts unique country code
 * the method with filter() function will count duplicate entries.
