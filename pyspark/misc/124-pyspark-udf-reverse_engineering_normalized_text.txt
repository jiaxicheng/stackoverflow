https://stackoverflow.com/questions/59104192/filter-if-string-contain-sub-string-pyspark/59105848#59105848

Reverse-engineer the normalized string to get the original sub-string from a text chunk.

The normalized string is created by removing all '[:alnum:]' characters, i.e.:

    df = df.withColumn(
            "column_normalized",
            F.regexp_replace(F.col("column_to_normalize"), "[^a-zA-Z0-9]+", ""))

The following proposed udf-method will not cover leading/trailing characters which might
be part of the expected matched sub-string. 
(1) we use two lists, n,d to save chars in each normalized string and its position in the original text
(2) ''.join(n) will be normalized original_text
(3) find the position of `normalized` in the above text
(4) map the start/end position to the position in original text by using the list `d`
(5) return the substring based on the above two positions
    
    def find_matched(orig, normalized):
        n, d = ([], [])
        for i in range(len(orig)):
           if orig[i].isalnum(): 
               n.append(orig[i])
               d.append(i)
        idx = ''.join(n).find(normalized)
        return orig[d[idx]:d[idx+len(normalized)]] if idx >= 0 else None

    spark.udf.register('find_matched', find_matched, 'string')
    
reverse-engineer the column_dataset_1_normalized from column_dataset_2, use udf only when column_dataset_1 can not find an exact match in column_dataset_2:
    
    df1.join(df2, cond3) \
       .withColumn('matched', expr('''
           IF(locate(column_dataset_1, column_dataset_2)>0
            , column_dataset_1
            , find_matched(column_dataset_2, column_dataset_1_normalized))
        ''')) \
       .select('column_dataset_2', 'matched', 'column_dataset_1_normalized') \
       .show(truncate=False) 
    
    +------------------------------------------------------------------------------------+-----------------------+---------------------------+
    |column_dataset_2                                                                    |matched                |column_dataset_1_normalized|
    +------------------------------------------------------------------------------------+-----------------------+---------------------------+
    |Por ejemplo, si W-B.7120RP-1605794se trata de un archivo de texto,                  |W-B.7120RP-1605794     |WB7120RP1605794            |
    |utilizados 125858G_022BR/P-070751 frecuentemente (por ejemplo, un texto que describe|125858G_022BR/P-070751 |125858G022BRP070751        |
    +------------------------------------------------------------------------------------+-----------------------+---------------------------+
    
          
Note:
 (1) One bug with this method is that the trailing non-alnum will be kept in the matched, see above example `125858G_022BR/P-070751 `. this is how Python list slice work, in `orig[start:end]`, orig[end] is the first alnum char after the matched, and any non-alnum before this char will be included into the `matched`.

    >>> find_matched('Por ejemplo, si W-B.7120RP-1605794se trata de un archivo de texto,     ', 'WB7120RP1605794')
    'W-B.7120RP-1605794'

    >>> find_matched('utilizados 125858G_022BR/P-070751 frecuentemente (por ejemplo, un describe','125858G022BRP070751')
    '125858G_022BR/P-070751 '

    >>> find_matched('utilizados 125858G_022BR/P-070751****frecuentemente (por ejemplo, un describe','125858G022BRP070751')
    '125858G_022BR/P-070751****'

 (2) use regexp_replace to remove the trailing alnum:

    from pyspark.sql.functions import regexp_replace

    df1.join(df2, cond1) \
       .withColumn('matched', regexp_replace(udf_find_matched('column_dataset_2', 'column_dataset_1_normalized'), r'[^0-9a-zA-Z]+$', '')) \
       .select('column_dataset_2', 'matched') \
       .show(truncate=False)
    +---------------------------------------------------------------------------------------+----------------------+
    |column_dataset_2                                                                       |matched               |
    +---------------------------------------------------------------------------------------+----------------------+
    |Por ejemplo, si W-B.7120RP-1605794se trata de un archivo de texto,                     |W-B.7120RP-1605794    |
    |se abrir¨¢ en un programa dW-B7120RP-1605794e procesamiento de texto.                  |W-B7120RP-1605794     |
    |utilizados 125858G_022BR/P-070751*** frecuentemente (por ejemplo, un texto que describe|125858G_022BR/P-070751|
    +---------------------------------------------------------------------------------------+----------------------+


