Useful and interesting tips for `awk` command:

(1) for gawk, FS can be reset at Line level in the code (instead in the BEGIN block) and then reset $0 and $N
    example: https://stackoverflow.com/questions/71956933/awk-2-prints-with-different-separators-from-the-same-file

        echo '"58062","2022-03-23 10:07:21.718670","Standard query 0x04c0 AAAA contoso.local"' |
            awk -F',' '{FS="[ \t\"]*"; $0=$3; print $(NF-1)}'
        #contoso.local
    Firstly, read line in and split fields by comma, and then set FS as `[ \t\"]*` and reset $0 using the value of $3
    finally print the second to the last field value $(NF-1)


(2) Convert named Months into number, similar to weekdays:
    example: https://stackoverflow.com/questions/78297014/how-to-convert-initial-timestamp-of-each-line

    $ cat test.log
    [Tue Apr  9 03:32:21 2024] {cmd1}
    [Tue Apr  9 03:33:42 2024] {cmd2}
    [Tue Apr  9 03:35:51 2024] {cmd3}

  Method-1: using index() function

    awk -F'[][{} ]*' '{
        mth=(index("JanFebMarAprMayJunJulAugSepOctNovDec",$3)+2)/3;     #<---- using index() function
        printf("%04d-%02d-%02d %s %s\n",$6,mth,$4,$5,$7)
    }' test.log

    this commnad yields:
    2024-04-09 03:32:21 cmd1
    2024-04-09 03:33:42 cmd2
    2024-04-09 03:35:51 cmd3

  Method-2: using patsplit() function (gawk 4.0+)
    awk -F'[][{} ]*' '
        BEGIN{
          n=patsplit("JanFebMarAprMayJunJulAugSepOctNovDec",m,/.../);
          for(i=1;i<=n;i++) mths[m[i]]=i
        }{
          printf("%04d-%02d-%02d %s %s\n",$6,mths[$3],$4,$5,$7)
    }' test.log

  Method-3: just using split() funciton but organize the months name differently:

    awk -F'[][{} ]*' '
        BEGIN{
          n=split("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec",m);
          for(i=1;i<=n;i++) mths[m[i]]=i
        }{
          printf("%04d-%02d-%02d %s %s\n",$6,mths[$3],$4,$5,$7)
    }' test.log

    
(3) about the semicolons, the following two command lines, 2nd one has an extra semicolon which makes
    two command line do complete different things:

    awk 'FNR==NR{a[$1];next}$1 in a{f=0;next}f{f=1}' 4-2.txt 4.txt
    awk 'FNR==NR{a[$1];next}$1 in a{f=0;next}f;{f=1}' 4-2.txt 4.txt

  the `f` in the 1st command line servers as a pattern, meaning if f is true, then do `{f=1}`
  the `f` in the 2nd command line is the same as `{print $0}` and is not a pattern to execute the next block `{f=1}`

  Make sure the presence of semicolon will make the code work correctly.

  REF: https://stackoverflow.com/questions/78788854


